;Q学習（状態+行動）
+var q_table: [][][]float
+var state_value: []float

+class Learn()
	
	+var time: int
	
	+var count: int
	+var step: int
	+var eta: float
	+var gamma: float
	*func ctor()
		do me.gamma :: 0.8
		do me.eta :: 0.2
		do @state_value :: #[\game@Xm * \game@Ym]float
		do @q_table :: #[\game@Xm, \game@Ym, 4]float
		do me.time :: 0
		do me.count :: 0
		do me.step :: 0
	end func
	
	+func init()
		do me.count :+ 1
		do dbg@print("count:\{me.count},step:\{me.step}で終了しました。\n")
		do me.step :: 0
	end func
	
	+func learn(p: \game@Player, t: \game@Target): int
		do me.step :+ 1
		
		var Qmax_list: []float :: #[4]float
		var r: float :: 0.0
		var a: int :: 0
		var Qmax: float
		;行動を選ぶ
		for i(0, 3)
			var pos: []int :: me.get_next_pos(p.x, p.y, i)
			
			if(me.out(pos[0], pos[1]) <> -1)
				for i2(0, 3)
					if(@q_table[pos[0]][pos[1]][i2] > Qmax_list[i] | i2 = 0)
						do Qmax_list[i] :: @q_table[pos[0]][pos[1]][i2]
					end if
				end for
			end if
			
			if(Qmax_list[i] > Qmax | i = 0)
				do a :: i
				do Qmax :: Qmax_list[i]
			end if
		end for
		
		
		;***************************今の状態・行動を評価をする
		do r :: me.get_reward(p, t)
		do @q_table[p.x][p.y][a] :: @q_table[p.x][p.y][a] + 0.2 * (r + 0.8 * Qmax - @q_table[p.x][p.y][a])
		;*************************************************	
		
		for i(0, 3)
			if(i = 0 | @q_table[p.x][p.y][i] > @state_value[p.x + p.y * \game@Ym])
				do @state_value[p.x + p.y * \game@Ym] :: @q_table[p.x][p.y][i]
			end if
		end for
		
		if(Qmax = 0.0)
			do a :: lib@rnd(0, 3)
		end if
		
		ret a
	end func
	
	
	+func out(x: int, y: int): int
		if(x > \game@Xm - 1 | x < 0 | y > \game@Ym - 1 | y < 0)
			ret - 1
		end if
		ret 0
	end func
	
	+func get_reward(p: \game@Player, t: \game@Target): float
		if(p.x = t.x & p.y = t.y)
			ret 10.0
		end if
		ret 0.0
	end func
	
	+func get_next_pos(x: int, y: int, a: int): []int
		switch(a)
		case 0
			do x :+ 1
		case 1
			do x :- 1
		case 2
			do y :- 1
		case 3
			do y :+ 1
		end switch
		ret[x, y]
	end func
	
	+func draw(x: int, y: int, width: float, height: float, font: draw@Font)
		
		
		do font.draw(x $ float * width + width / 2.0 + width / 3.0, y $ float * height + height / 2.0, "\{@q_table[x][y][0]}", 0xFF000000)
		do font.draw(x $ float * width + width / 2.0 - width / 3.0, y $ float * height + height / 2.0, "\{@q_table[x][y][1]}", 0xFF000000)
		do font.draw(x $ float * width + width / 2.0, y $ float * height + height / 2.0 - height / 3.0, "\{@q_table[x][y][2]}", 0xFF000000)
		do font.draw(x $ float * width + width / 2.0, y $ float * height + height / 2.0 + height / 3.0, "\{@q_table[x][y][3]}", 0xFF000000)
		do font.draw(x $ float * width + width / 2.0, y $ float * height + height / 2.0, "\{@state_value[x + y * \game@Ym]}", 0xFF000000)
		
	end func
	
end class
